import 'dart:async';

import 'package:flutter/material.dart';

/// This class is generated by the flappy_translator package
/// Please do not change anything manually in this file, instead re-generate it when changes are available
// ignore_for_file: prefer_single_quotes
class Translations {
  String get appBarClose => _getText('appBarClose');

  String get notificationsDisabledDialogTitle =>
      _getText('notificationsDisabledDialogTitle');

  String get notificationsDisabledDialogMessage =>
      _getText('notificationsDisabledDialogMessage');

  String get notificationsDisabledDialogPositive =>
      _getText('notificationsDisabledDialogPositive');

  String get notificationsDisabledDialogNegative =>
      _getText('notificationsDisabledDialogNegative');

  String get genericDialogErrorTitle => _getText('genericDialogErrorTitle');

  String get genericDialogPositiveLabel =>
      _getText('genericDialogPositiveLabel');

  String get genericButtonFilterDeal => _getText('genericButtonFilterDeal');

  String get genericButtonFilterAverage =>
      _getText('genericButtonFilterAverage');

  String get genericButtonFilterExpensive =>
      _getText('genericButtonFilterExpensive');

  String genericPriceItem({
    @required String value,
  }) {
    String text = _getText('genericPriceItem');
    if (value != null) {
      text = text.replaceAll("%value\$s", value);
    }
    return text;
  }

  String genericTimeItem({
    @required String duration,
  }) {
    String text = _getText('genericTimeItem');
    if (duration != null) {
      text = text.replaceAll("%duration\$s", duration);
    }
    return text;
  }

  String get genericTimeDurationMinutes =>
      _getText('genericTimeDurationMinutes');

  String get genericTimeDurationHours => _getText('genericTimeDurationHours');

  String get genericTimeDurationDays => _getText('genericTimeDurationDays');

  String get genericTimeDurationMinutesLong =>
      _getText('genericTimeDurationMinutesLong');

  String get genericTimeDurationHoursLong =>
      _getText('genericTimeDurationHoursLong');

  String get genericTimeDurationDaysLong =>
      _getText('genericTimeDurationDaysLong');

  String get genericLoadingText => _getText('genericLoadingText');

  String get genericListLoadingNextItems =>
      _getText('genericListLoadingNextItems');

  String get genericListEmpty => _getText('genericListEmpty');

  String get genericListError => _getText('genericListError');

  String get genericListRetry => _getText('genericListRetry');

  String get homePageScreenTitle => _getText('homePageScreenTitle');

  String get homePageAppBarSearchHint => _getText('homePageAppBarSearchHint');

  String get homePageAppBarDefaultLocation =>
      _getText('homePageAppBarDefaultLocation');

  String get homePageListReadMore => _getText('homePageListReadMore');

  String get homePageErrorMessage => _getText('homePageErrorMessage');

  String get homePageErrorButton => _getText('homePageErrorButton');

  String get homePageEmpty => _getText('homePageEmpty');

  String get subscribeToNotificationsButtonInitial =>
      _getText('subscribeToNotificationsButtonInitial');

  String get subscribeToNotificationsButtonLoading =>
      _getText('subscribeToNotificationsButtonLoading');

  String get subscribeToNotificationsButtonSuccess =>
      _getText('subscribeToNotificationsButtonSuccess');

  String get subscribeToNotificationsButtonError =>
      _getText('subscribeToNotificationsButtonError');

  String get appBarDetailsSubtitle => _getText('appBarDetailsSubtitle');

  String get buttonCreateAlert => _getText('buttonCreateAlert');

  String get titleBestDeal => _getText('titleBestDeal');

  String get titleCalendar => _getText('titleCalendar');

  String get buttonOpenDetails => _getText('buttonOpenDetails');

  String get buttonListFlights => _getText('buttonListFlights');

  String titleOutwardFlight({
    @required String date,
  }) {
    String text = _getText('titleOutwardFlight');
    if (date != null) {
      text = text.replaceAll("%date\$s", date);
    }
    return text;
  }

  String titleReturnFlight({
    @required String date,
  }) {
    String text = _getText('titleReturnFlight');
    if (date != null) {
      text = text.replaceAll("%date\$s", date);
    }
    return text;
  }

  String textCompanyName({
    @required String company,
  }) {
    String text = _getText('textCompanyName');
    if (company != null) {
      text = text.replaceAll("%company\$s", company);
    }
    return text;
  }

  String textStopDuration({
    @required String duration,
  }) {
    String text = _getText('textStopDuration');
    if (duration != null) {
      text = text.replaceAll("%duration\$s", duration);
    }
    return text;
  }

  String get rangePickerScreenTitle => _getText('rangePickerScreenTitle');

  String get rangePickerTitleDuration => _getText('rangePickerTitleDuration');

  String get rangePickerButtonNoDuration =>
      _getText('rangePickerButtonNoDuration');

  String get rangePickerButtonUpToThreeDays =>
      _getText('rangePickerButtonUpToThreeDays');

  String get rangePickerButtonUpToFiveDays =>
      _getText('rangePickerButtonUpToFiveDays');

  String get rangePickerButtonUpToNineDays =>
      _getText('rangePickerButtonUpToNineDays');

  String get rangePickerButtonUpToFourteenDays =>
      _getText('rangePickerButtonUpToFourteenDays');

  String get rangePickerTitleCalendar => _getText('rangePickerTitleCalendar');

  String get rangePickerTabButtonDeparture =>
      _getText('rangePickerTabButtonDeparture');

  String get rangePickerTabButtonOutward =>
      _getText('rangePickerTabButtonOutward');

  String get rangePickerButtonSave => _getText('rangePickerButtonSave');

  String get filtersScreenTitle => _getText('filtersScreenTitle');

  String get filtersButtonCloseTooltip => _getText('filtersButtonCloseTooltip');

  String get filtersMenuDeleteFilters => _getText('filtersMenuDeleteFilters');

  String get filtersButtonEdit => _getText('filtersButtonEdit');

  String get filtersButtonCreate => _getText('filtersButtonCreate');

  String get filtersButtonApply => _getText('filtersButtonApply');

  String get filtersItemDates => _getText('filtersItemDates');

  String get filtersItemStopOvers => _getText('filtersItemStopOvers');

  String get filtersItemFlightDuration => _getText('filtersItemFlightDuration');

  String filtersItemFlightDurationSubtitle({
    @required int startDuration,
    @required int endDuration,
  }) {
    String text = _getText('filtersItemFlightDurationSubtitle');
    if (startDuration != null) {
      text = text.replaceAll("%startDuration\$d", startDuration.toString());
    }
    if (endDuration != null) {
      text = text.replaceAll("%endDuration\$d", endDuration.toString());
    }
    return text;
  }

  String get filtersItemFlightDurationMinValue =>
      _getText('filtersItemFlightDurationMinValue');

  String get filtersItemFlightDurationMaxValue =>
      _getText('filtersItemFlightDurationMaxValue');

  String get filtersItemBudget => _getText('filtersItemBudget');

  String filtersItemBudgetSubtitle({
    @required int startBudget,
    @required int endBudget,
  }) {
    String text = _getText('filtersItemBudgetSubtitle');
    if (startBudget != null) {
      text = text.replaceAll("%startBudget\$d", startBudget.toString());
    }
    if (endBudget != null) {
      text = text.replaceAll("%endBudget\$d", endBudget.toString());
    }
    return text;
  }

  String get filtersItemBudgetMinValue => _getText('filtersItemBudgetMinValue');

  String get filtersItemBudgetMaxValue => _getText('filtersItemBudgetMaxValue');

  String get filtersStopsItemStopOversNone =>
      _getText('filtersStopsItemStopOversNone');

  String get filtersStopsItemStopOversOne =>
      _getText('filtersStopsItemStopOversOne');

  String get filtersStopsItemStopOversMultiple =>
      _getText('filtersStopsItemStopOversMultiple');

  String get alertsListScreenTitle => _getText('alertsListScreenTitle');

  String get alertsListError => _getText('alertsListError');

  String get alertsListTabNotifications =>
      _getText('alertsListTabNotifications');

  String get alertsListTabManage => _getText('alertsListTabManage');

  String get alertsListNotificationsEmpty =>
      _getText('alertsListNotificationsEmpty');

  String get alertsListNotificationsErrorMessage =>
      _getText('alertsListNotificationsErrorMessage');

  String get alertsListNotificationsErrorButton =>
      _getText('alertsListNotificationsErrorButton');

  String alertsListNotificationsItemCities({
    @required String departureCity,
    @required String arrivalCity,
  }) {
    String text = _getText('alertsListNotificationsItemCities');
    if (departureCity != null) {
      text = text.replaceAll("%departureCity\$s", departureCity);
    }
    if (arrivalCity != null) {
      text = text.replaceAll("%arrivalCity\$s", arrivalCity);
    }
    return text;
  }

  String alertsListNotificationsItemJourney({
    @required String departureDate,
    @required String arrivalDate,
  }) {
    String text = _getText('alertsListNotificationsItemJourney');
    if (departureDate != null) {
      text = text.replaceAll("%departureDate\$s", departureDate);
    }
    if (arrivalDate != null) {
      text = text.replaceAll("%arrivalDate\$s", arrivalDate);
    }
    return text;
  }

  String alertsListNotificationsItemNotificationDate({
    @required String date,
  }) {
    String text = _getText('alertsListNotificationsItemNotificationDate');
    if (date != null) {
      text = text.replaceAll("%date\$s", date);
    }
    return text;
  }

  String alertsListNotificationsItemNotificationDateRange({
    @required String startDate,
    @required String endDate,
  }) {
    String text = _getText('alertsListNotificationsItemNotificationDateRange');
    if (startDate != null) {
      text = text.replaceAll("%startDate\$s", startDate);
    }
    if (endDate != null) {
      text = text.replaceAll("%endDate\$s", endDate);
    }
    return text;
  }

  String alertsListNotificationsItemNotificationDateRangeFlexible({
    @required String startDate,
    @required String endDate,
  }) {
    String text =
        _getText('alertsListNotificationsItemNotificationDateRangeFlexible');
    if (startDate != null) {
      text = text.replaceAll("%startDate\$s", startDate);
    }
    if (endDate != null) {
      text = text.replaceAll("%endDate\$s", endDate);
    }
    return text;
  }

  String get alertsListNotificationsItemNotificationDateUnknown =>
      _getText('alertsListNotificationsItemNotificationDateUnknown');

  String get alertsListNotificationsItemButtonDeleteTooltip =>
      _getText('alertsListNotificationsItemButtonDeleteTooltip');

  String get alertsListManageEmpty => _getText('alertsListManageEmpty');

  String get alertsListManageErrorMessage =>
      _getText('alertsListManageErrorMessage');

  String get alertsListManageErrorButton =>
      _getText('alertsListManageErrorButton');

  String get alertsListManageItemButtonDeleteTooltip =>
      _getText('alertsListManageItemButtonDeleteTooltip');

  String get alertsListManageItemButtonEditTooltip =>
      _getText('alertsListManageItemButtonEditTooltip');

  String get alertsListManageItemSingleNotification =>
      _getText('alertsListManageItemSingleNotification');

  String alertsListManageItemMultipleNotifications({
    @required int count,
  }) {
    String text = _getText('alertsListManageItemMultipleNotifications');
    if (count != null) {
      text = text.replaceAll("%count\$d", count.toString());
    }
    return text;
  }

  String get alertsListManageItemUpdateLoading =>
      _getText('alertsListManageItemUpdateLoading');

  String get alertsListManageItemUpdateErrorDialogTitle =>
      _getText('alertsListManageItemUpdateErrorDialogTitle');

  String get alertsListManageItemUpdateErrorDialogMessage =>
      _getText('alertsListManageItemUpdateErrorDialogMessage');

  String get alertsListManageItemDeleteLoading =>
      _getText('alertsListManageItemDeleteLoading');

  String get alertsListManageItemDeleteErrorDialogTitle =>
      _getText('alertsListManageItemDeleteErrorDialogTitle');

  String get alertsListManageItemDeleteErrorDialogMessage =>
      _getText('alertsListManageItemDeleteErrorDialogMessage');

  String get alertsListManageItemNoFilter =>
      _getText('alertsListManageItemNoFilter');

  String get travelDatesScreenTitle => _getText('travelDatesScreenTitle');

  String get travelDatesTabFlexible => _getText('travelDatesTabFlexible');

  String get travelDatesFlexibleRange => _getText('travelDatesFlexibleRange');

  String travelDatesFlexibleRangeSubtitle({
    @required String startDate,
    @required String endDate,
  }) {
    String text = _getText('travelDatesFlexibleRangeSubtitle');
    if (startDate != null) {
      text = text.replaceAll("%startDate\$s", startDate);
    }
    if (endDate != null) {
      text = text.replaceAll("%endDate\$s", endDate);
    }
    return text;
  }

  String get travelDatesFlexibleTripDuration =>
      _getText('travelDatesFlexibleTripDuration');

  String get travelDatesFlexibleTripDurationWeekEnd =>
      _getText('travelDatesFlexibleTripDurationWeekEnd');

  String travelDatesFlexibleTripDurationSubtitle({
    @required int minLength,
    @required int maxLength,
  }) {
    String text = _getText('travelDatesFlexibleTripDurationSubtitle');
    if (minLength != null) {
      text = text.replaceAll("%minLength\$d", minLength.toString());
    }
    if (maxLength != null) {
      text = text.replaceAll("%maxLength\$d", maxLength.toString());
    }
    return text;
  }

  String travelDatesFlexibleTripDurationSubtitleMax({
    @required int minLength,
    @required int maxLength,
  }) {
    String text = _getText('travelDatesFlexibleTripDurationSubtitleMax');
    if (minLength != null) {
      text = text.replaceAll("%minLength\$d", minLength.toString());
    }
    if (maxLength != null) {
      text = text.replaceAll("%maxLength\$d", maxLength.toString());
    }
    return text;
  }

  String get travelDatesTabFixed => _getText('travelDatesTabFixed');

  String travelDatesTabFixedSubtitle({
    @required String fromDate,
    @required String toDate,
  }) {
    String text = _getText('travelDatesTabFixedSubtitle');
    if (fromDate != null) {
      text = text.replaceAll("%fromDate\$s", fromDate);
    }
    if (toDate != null) {
      text = text.replaceAll("%toDate\$s", toDate);
    }
    return text;
  }

  String get travelDatesTabDeparture => _getText('travelDatesTabDeparture');

  String get travelDatesTabOutward => _getText('travelDatesTabOutward');

  String get travelDatesButtonValidate => _getText('travelDatesButtonValidate');

  String get travelDatesButtonFlexible => _getText('travelDatesButtonFlexible');

  String get locationPickerLabelFrom => _getText('locationPickerLabelFrom');

  String get locationPickerLabelTo => _getText('locationPickerLabelTo');

  String locationPickerItemCity({
    @required String cityName,
    @required String countryCode,
  }) {
    String text = _getText('locationPickerItemCity');
    if (cityName != null) {
      text = text.replaceAll("%cityName\$s", cityName);
    }
    if (countryCode != null) {
      text = text.replaceAll("%countryCode\$s", countryCode);
    }
    return text;
  }

  String locationPickerItemAirport({
    @required String airportCode,
    @required String airportName,
  }) {
    String text = _getText('locationPickerItemAirport');
    if (airportCode != null) {
      text = text.replaceAll("%airportCode\$s", airportCode);
    }
    if (airportName != null) {
      text = text.replaceAll("%airportName\$s", airportName);
    }
    return text;
  }

  String get locationPickerNoResult => _getText('locationPickerNoResult');

  String get locationPickerErrorLabel => _getText('locationPickerErrorLabel');

  String get locationPickerErrorButton => _getText('locationPickerErrorButton');

  String get locationPickerSearchFieldHintFrom =>
      _getText('locationPickerSearchFieldHintFrom');

  String get locationPickerSearchFieldHintTo =>
      _getText('locationPickerSearchFieldHintTo');

  String get walkthroughStep1Line1 => _getText('walkthroughStep1Line1');

  String get walkthroughStep1Line2 => _getText('walkthroughStep1Line2');

  String get walkthroughStep1PositiveButton =>
      _getText('walkthroughStep1PositiveButton');

  String get walkthroughStep2Line1 => _getText('walkthroughStep2Line1');

  String get walkthroughStep2Line2 => _getText('walkthroughStep2Line2');

  String get walkthroughStep2PositiveButton =>
      _getText('walkthroughStep2PositiveButton');

  String get walkthroughStep2NegativeButton =>
      _getText('walkthroughStep2NegativeButton');

  String get destinationViewerErrorMessage =>
      _getText('destinationViewerErrorMessage');

  String get destinationViewerErrorButton =>
      _getText('destinationViewerErrorButton');

  String get destinationViewerEmpty => _getText('destinationViewerEmpty');

  String detailsScreenTitle({
    @required String departure,
    @required String arrival,
  }) {
    String text = _getText('detailsScreenTitle');
    if (departure != null) {
      text = text.replaceAll("%departure\$s", departure);
    }
    if (arrival != null) {
      text = text.replaceAll("%arrival\$s", arrival);
    }
    return text;
  }

  String get detailsTipsTitle => _getText('detailsTipsTitle');

  String get detailsTipsBadgeSuperDeal => _getText('detailsTipsBadgeSuperDeal');

  String get detailsHopStopOversSingle => _getText('detailsHopStopOversSingle');

  String detailsHopStopOversMultiple({
    @required int count,
  }) {
    String text = _getText('detailsHopStopOversMultiple');
    if (count != null) {
      text = text.replaceAll("%count\$d", count.toString());
    }
    return text;
  }

  String detailsHopStopOversItem({
    @required String destinationCode,
    @required String duration,
  }) {
    String text = _getText('detailsHopStopOversItem');
    if (destinationCode != null) {
      text = text.replaceAll("%destinationCode\$s", destinationCode);
    }
    if (duration != null) {
      text = text.replaceAll("%duration\$s", duration);
    }
    return text;
  }

  String get detailsHopStopOversItemSeparator =>
      _getText('detailsHopStopOversItemSeparator');

  String detailsShareDeal({
    @required String destination,
    @required String price,
    @required String iosLink,
    @required String packageName,
  }) {
    String text = _getText('detailsShareDeal');
    if (destination != null) {
      text = text.replaceAll("%destination\$s", destination);
    }
    if (price != null) {
      text = text.replaceAll("%price\$s", price);
    }
    if (iosLink != null) {
      text = text.replaceAll("%iosLink\$s", iosLink);
    }
    if (packageName != null) {
      text = text.replaceAll("%packageName\$s", packageName);
    }
    return text;
  }

  String get detailsButtonCalendar => _getText('detailsButtonCalendar');

  String get priceCalendarScreenTitle => _getText('priceCalendarScreenTitle');

  String get priceCalendarFlightDurationTitle =>
      _getText('priceCalendarFlightDurationTitle');

  String priceCalendarFlightDurationValue({
    @required int minLength,
    @required int maxLength,
  }) {
    String text = _getText('priceCalendarFlightDurationValue');
    if (minLength != null) {
      text = text.replaceAll("%minLength\$d", minLength.toString());
    }
    if (maxLength != null) {
      text = text.replaceAll("%maxLength\$d", maxLength.toString());
    }
    return text;
  }

  String priceCalendarFlightDurationValueMax({
    @required int minLength,
    @required int maxLength,
  }) {
    String text = _getText('priceCalendarFlightDurationValueMax');
    if (minLength != null) {
      text = text.replaceAll("%minLength\$d", minLength.toString());
    }
    if (maxLength != null) {
      text = text.replaceAll("%maxLength\$d", maxLength.toString());
    }
    return text;
  }

  String get priceCalendarTabDeparture => _getText('priceCalendarTabDeparture');

  String get priceCalendarTabArrival => _getText('priceCalendarTabArrival');

  String get priceCalendarButtonConfirm =>
      _getText('priceCalendarButtonConfirm');

  String get priceCalendarErrorMessage => _getText('priceCalendarErrorMessage');

  String get priceCalendarErrorButton => _getText('priceCalendarErrorButton');

  String dealDetailsNotificationsMessage({
    @required String destination,
  }) {
    String text = _getText('dealDetailsNotificationsMessage');
    if (destination != null) {
      text = text.replaceAll("%destination\$s", destination);
    }
    return text;
  }

  String get dealDetailsNotificationsButtonEnable =>
      _getText('dealDetailsNotificationsButtonEnable');

  String get dealDetailsNotificationsButtonLater =>
      _getText('dealDetailsNotificationsButtonLater');

  String get dealDetailsMainOfferTitle => _getText('dealDetailsMainOfferTitle');

  String get dealDetailsOfferButtonCheckAvailability =>
      _getText('dealDetailsOfferButtonCheckAvailability');

  String get dealDetailsOfferButtonCheckAvailabilityDialogTitle =>
      _getText('dealDetailsOfferButtonCheckAvailabilityDialogTitle');

  String get dealDetailsOfferButtonCheckAvailabilityDialogMessage =>
      _getText('dealDetailsOfferButtonCheckAvailabilityDialogMessage');

  String get dealDetailsErrorLabel => _getText('dealDetailsErrorLabel');

  String get dealDetailsErrorButton => _getText('dealDetailsErrorButton');

  String dealDetailsAppBarTitle({
    @required String departureCity,
    @required String arrivalCity,
  }) {
    String text = _getText('dealDetailsAppBarTitle');
    if (departureCity != null) {
      text = text.replaceAll("%departureCity\$s", departureCity);
    }
    if (arrivalCity != null) {
      text = text.replaceAll("%arrivalCity\$s", arrivalCity);
    }
    return text;
  }

  String get dealDetailsAppBarTitleEmpty =>
      _getText('dealDetailsAppBarTitleEmpty');

  String get createAlertScreenTitle => _getText('createAlertScreenTitle');

  String createAlertScreenSubtitle({
    @required String departure,
    @required String arrival,
  }) {
    String text = _getText('createAlertScreenSubtitle');
    if (departure != null) {
      text = text.replaceAll("%departure\$s", departure);
    }
    if (arrival != null) {
      text = text.replaceAll("%arrival\$s", arrival);
    }
    return text;
  }

  String get createAlertItemDates => _getText('createAlertItemDates');

  String get createAlertItemDatesEmptyValue =>
      _getText('createAlertItemDatesEmptyValue');

  String get createAlertItemStopOvers => _getText('createAlertItemStopOvers');

  String get createAlertItemStopOversEmptyValue =>
      _getText('createAlertItemStopOversEmptyValue');

  String get createAlertItemFlightDuration =>
      _getText('createAlertItemFlightDuration');

  String get createAlertItemFlightDurationEmptyValue =>
      _getText('createAlertItemFlightDurationEmptyValue');

  String get createAlertItemBudget => _getText('createAlertItemBudget');

  String get createAlertItemBudgetEmptyValue =>
      _getText('createAlertItemBudgetEmptyValue');

  String get createAlertButtonCreate => _getText('createAlertButtonCreate');

  String get calendarDay1 => _getText('calendarDay1');

  String get calendarDay2 => _getText('calendarDay2');

  String get calendarDay3 => _getText('calendarDay3');

  String get calendarDay4 => _getText('calendarDay4');

  String get calendarDay5 => _getText('calendarDay5');

  String get calendarDay6 => _getText('calendarDay6');

  String get calendarDay7 => _getText('calendarDay7');

  String get dealAvailableScreenMain => _getText('dealAvailableScreenMain');

  String get dealAvailableScreenPricePerTraveler =>
      _getText('dealAvailableScreenPricePerTraveler');

  String get dealAvailableScreenBook => _getText('dealAvailableScreenBook');

  String get dealAvailableScreenAlternatives =>
      _getText('dealAvailableScreenAlternatives');

  String get dealAvailableScreenAlternativesDirectOne =>
      _getText('dealAvailableScreenAlternativesDirectOne');

  String dealAvailableScreenAlternativesDirectTwo({
    @required int price,
  }) {
    String text = _getText('dealAvailableScreenAlternativesDirectTwo');
    if (price != null) {
      text = text.replaceAll("%price\$d", price.toString());
    }
    return text;
  }

  String get dealAvailableScreenAlternativesHoursOne =>
      _getText('dealAvailableScreenAlternativesHoursOne');

  String dealAvailableScreenAlternativesHoursTwo({
    @required int price,
  }) {
    String text = _getText('dealAvailableScreenAlternativesHoursTwo');
    if (price != null) {
      text = text.replaceAll("%price\$d", price.toString());
    }
    return text;
  }

  String get dealNotAvailableScreenMain =>
      _getText('dealNotAvailableScreenMain');

  String dealNotAvailableScreenDealInfosOne({
    @required int duration,
    @required String durationType,
  }) {
    String text = _getText('dealNotAvailableScreenDealInfosOne');
    if (duration != null) {
      text = text.replaceAll("%duration\$d", duration.toString());
    }
    if (durationType != null) {
      text = text.replaceAll("%durationType\$s", durationType);
    }
    return text;
  }

  String get dealNotAvailableScreenDealInfosTwo =>
      _getText('dealNotAvailableScreenDealInfosTwo');

  String get dealNotAvailableScreenEnableNotifications =>
      _getText('dealNotAvailableScreenEnableNotifications');

  String get dealNotAvailableScreenBestOffer =>
      _getText('dealNotAvailableScreenBestOffer');

  String directAlternativesScreenMain({
    @required int price,
  }) {
    String text = _getText('directAlternativesScreenMain');
    if (price != null) {
      text = text.replaceAll("%price\$d", price.toString());
    }
    return text;
  }

  String hoursAlternativesScreenMain({
    @required int price,
  }) {
    String text = _getText('hoursAlternativesScreenMain');
    if (price != null) {
      text = text.replaceAll("%price\$d", price.toString());
    }
    return text;
  }

  String tripDetailsScreenOutbound({
    @required String city,
  }) {
    String text = _getText('tripDetailsScreenOutbound');
    if (city != null) {
      text = text.replaceAll("%city\$s", city);
    }
    return text;
  }

  String tripDetailsScreenInbound({
    @required String city,
  }) {
    String text = _getText('tripDetailsScreenInbound');
    if (city != null) {
      text = text.replaceAll("%city\$s", city);
    }
    return text;
  }

  String tripDetailsScreenStopOver({
    @required int hours,
    @required int minutes,
  }) {
    String text = _getText('tripDetailsScreenStopOver');
    if (hours != null) {
      text = text.replaceAll("%hours\$d", hours.toString());
    }
    if (minutes != null) {
      text = text.replaceAll("%minutes\$d", minutes.toString());
    }
    return text;
  }

  String get tripDetailsScreenContinue => _getText('tripDetailsScreenContinue');

  String tripDetailsScreenOperatedBy({
    @required String company,
  }) {
    String text = _getText('tripDetailsScreenOperatedBy');
    if (company != null) {
      text = text.replaceAll("%company\$s", company);
    }
    return text;
  }

  String get travelersCounterScreenTitle =>
      _getText('travelersCounterScreenTitle');

  String get travelersCounterScreenInfantAge =>
      _getText('travelersCounterScreenInfantAge');

  String get travelersCounterScreenBabyAge =>
      _getText('travelersCounterScreenBabyAge');

  String get travelersCounterScreenConfirm =>
      _getText('travelersCounterScreenConfirm');

  String get addOptionsScreenTitle => _getText('addOptionsScreenTitle');

  String get addOptionsScreenAddLuggage =>
      _getText('addOptionsScreenAddLuggage');

  String addOptionsScreenLuggagePerTraveler({
    @required int travelerNb,
  }) {
    String text = _getText('addOptionsScreenLuggagePerTraveler');
    if (travelerNb != null) {
      text = text.replaceAll("%travelerNb\$d", travelerNb.toString());
    }
    return text;
  }

  String addOptionsScreenLuggagePerTravelerSub({
    @required int bagagePrice,
  }) {
    String text = _getText('addOptionsScreenLuggagePerTravelerSub');
    if (bagagePrice != null) {
      text = text.replaceAll("%bagagePrice\$d", bagagePrice.toString());
    }
    return text;
  }

  String get addOptionsScreenTotal => _getText('addOptionsScreenTotal');

  String addOptionsScreenSummary({
    @required int nbTravelers,
    @required int totalLuggages,
  }) {
    String text = _getText('addOptionsScreenSummary');
    if (nbTravelers != null) {
      text = text.replaceAll("%nbTravelers\$d", nbTravelers.toString());
    }
    if (totalLuggages != null) {
      text = text.replaceAll("%totalLuggages\$d", totalLuggages.toString());
    }
    return text;
  }

  String get addOptionsScreenContinue => _getText('addOptionsScreenContinue');

  String get priceDetailsScreenTitle => _getText('priceDetailsScreenTitle');

  String priceDetailsScreenCabinSummary({
    @required String cabinClass,
  }) {
    String text = _getText('priceDetailsScreenCabinSummary');
    if (cabinClass != null) {
      text = text.replaceAll("%cabinClass\$s", cabinClass);
    }
    return text;
  }

  String get priceDetailsScreenChoiceSummaryOne =>
      _getText('priceDetailsScreenChoiceSummaryOne');

  String get priceDetailsScreenChoiceSummaryTwo =>
      _getText('priceDetailsScreenChoiceSummaryTwo');

  String get priceDetailsScreenChoiceSummaryThree =>
      _getText('priceDetailsScreenChoiceSummaryThree');

  String get priceDetailsScreenSeat => _getText('priceDetailsScreenSeat');

  String get priceDetailsScreenSeatChoice =>
      _getText('priceDetailsScreenSeatChoice');

  String get priceDetailsScreenCabinLuggageSummary =>
      _getText('priceDetailsScreenCabinLuggageSummary');

  String get priceDetailsScreenLuggageSummary =>
      _getText('priceDetailsScreenLuggageSummary');

  String priceDetailsScreenLuggageSummaryPrice({
    @required int luggageNb,
    @required int luggagePrice,
  }) {
    String text = _getText('priceDetailsScreenLuggageSummaryPrice');
    if (luggageNb != null) {
      text = text.replaceAll("%luggageNb\$d", luggageNb.toString());
    }
    if (luggagePrice != null) {
      text = text.replaceAll("%luggagePrice\$d", luggagePrice.toString());
    }
    return text;
  }

  String get priceDetailsScreenModification =>
      _getText('priceDetailsScreenModification');

  String priceDetailsScreenModificationPrice({
    @required int modificationPriceInt,
    @required int modificationPriceDecimal,
  }) {
    String text = _getText('priceDetailsScreenModificationPrice');
    if (modificationPriceInt != null) {
      text = text.replaceAll(
          "%modificationPriceInt\$d", modificationPriceInt.toString());
    }
    if (modificationPriceDecimal != null) {
      text = text.replaceAll(
          "%modificationPriceDecimal\$d", modificationPriceDecimal.toString());
    }
    return text;
  }

  String get priceDetailsScreenCancelation =>
      _getText('priceDetailsScreenCancelation');

  String get priceDetailsScreenCancelationConditions =>
      _getText('priceDetailsScreenCancelationConditions');

  String get priceDetailsScreenTip => _getText('priceDetailsScreenTip');

  String get priceDetailsScreenTipDescription =>
      _getText('priceDetailsScreenTipDescription');

  String get priceDetailsScreenTotal => _getText('priceDetailsScreenTotal');

  String get priceDetailsScreenContinue =>
      _getText('priceDetailsScreenContinue');

  String get chooseTravelersScreenTitle =>
      _getText('chooseTravelersScreenTitle');

  String chooseTravelersScreenTravelerNumber({
    @required int travelerNb,
  }) {
    String text = _getText('chooseTravelersScreenTravelerNumber');
    if (travelerNb != null) {
      text = text.replaceAll("%travelerNb\$d", travelerNb.toString());
    }
    return text;
  }

  String chooseTravelersScreenTravelerType({
    @required String travelerType,
  }) {
    String text = _getText('chooseTravelersScreenTravelerType');
    if (travelerType != null) {
      text = text.replaceAll("%travelerType\$s", travelerType);
    }
    return text;
  }

  String get tripCardShowDetails => _getText('tripCardShowDetails');

  String luggagesNumberCount({
    @required int luggagesNumber,
  }) {
    String text = _getText('luggagesNumberCount');
    if (luggagesNumber != null) {
      text = text.replaceAll("%luggagesNumber\$d", luggagesNumber.toString());
    }
    return text;
  }

  String get travelerTypeAdult => _getText('travelerTypeAdult');

  String get travelerTypeInfant => _getText('travelerTypeInfant');

  String get travelerTypeBaby => _getText('travelerTypeBaby');

  String get newTravelerScreenWarningOne =>
      _getText('newTravelerScreenWarningOne');

  String get newTravelerScreenWarningTwo =>
      _getText('newTravelerScreenWarningTwo');

  String get newTravelerScreenRequiredInfosTitle =>
      _getText('newTravelerScreenRequiredInfosTitle');

  String get newTravelerScreenLastName => _getText('newTravelerScreenLastName');

  String get newTravelerScreenFirstName =>
      _getText('newTravelerScreenFirstName');

  String get newTravelerScreenSecondName =>
      _getText('newTravelerScreenSecondName');

  String get newTravelerScreenBirthdate =>
      _getText('newTravelerScreenBirthdate');

  String get newTravelerScreenFirstGender =>
      _getText('newTravelerScreenFirstGender');

  String get newTravelerScreenNationality =>
      _getText('newTravelerScreenNationality');

  String get newTravelerScreenPassportNumber =>
      _getText('newTravelerScreenPassportNumber');

  String get newTravelerScreenExpirationDate =>
      _getText('newTravelerScreenExpirationDate');

  String get newTravelerScreenAdditionalInfosTitle =>
      _getText('newTravelerScreenAdditionalInfosTitle');

  String get newTravelerScreenNeedAssistance =>
      _getText('newTravelerScreenNeedAssistance');

  String get newTravelerScreenPhoneNumber =>
      _getText('newTravelerScreenPhoneNumber');

  String get newTravelerScreenEmail => _getText('newTravelerScreenEmail');

  String get newTravelerScreenEmailConfirmation =>
      _getText('newTravelerScreenEmailConfirmation');

  String get newTravelerScreenValidate => _getText('newTravelerScreenValidate');

  String get newTravelerScreenErrorName =>
      _getText('newTravelerScreenErrorName');

  String get newTravelerScreenErrorPassportNumber =>
      _getText('newTravelerScreenErrorPassportNumber');

  String get newTravelerScreenErrorWrongEmail =>
      _getText('newTravelerScreenErrorWrongEmail');

  String get newTravelerScreenErrorDifferentEmails =>
      _getText('newTravelerScreenErrorDifferentEmails');

  String get travelersSummaryScreenSelectPayment =>
      _getText('travelersSummaryScreenSelectPayment');

  String get travelersSummaryScreenAdult =>
      _getText('travelersSummaryScreenAdult');

  String get travelersSummaryScreenInfant =>
      _getText('travelersSummaryScreenInfant');

  String get travelersSummaryScreenBaby =>
      _getText('travelersSummaryScreenBaby');

  String get selectPaymentScreenAddCard =>
      _getText('selectPaymentScreenAddCard');

  String selectPaymentScreenNameType({
    @required String travelerName,
    @required String travelerType,
  }) {
    String text = _getText('selectPaymentScreenNameType');
    if (travelerName != null) {
      text = text.replaceAll("%travelerName\$s", travelerName);
    }
    if (travelerType != null) {
      text = text.replaceAll("%travelerType\$s", travelerType);
    }
    return text;
  }

  String selectPaymentScreenCardTypeNumber({
    @required String cardType,
    @required String hiddenCardNumber,
  }) {
    String text = _getText('selectPaymentScreenCardTypeNumber');
    if (cardType != null) {
      text = text.replaceAll("%cardType\$s", cardType);
    }
    if (hiddenCardNumber != null) {
      text = text.replaceAll("%hiddenCardNumber\$s", hiddenCardNumber);
    }
    return text;
  }

  String get selectPaymentScreenBasePrice =>
      _getText('selectPaymentScreenBasePrice');

  String get selectPaymentScreenTaxes => _getText('selectPaymentScreenTaxes');

  String get selectPaymentScreenTotal => _getText('selectPaymentScreenTotal');

  String selectPaymentScreenOneWaySummary({
    @required int nbOneWay,
  }) {
    String text = _getText('selectPaymentScreenOneWaySummary');
    if (nbOneWay != null) {
      text = text.replaceAll("%nbOneWay\$d", nbOneWay.toString());
    }
    return text;
  }

  String selectPaymentScreenRoundTripSummary({
    @required int nbRoundTrip,
  }) {
    String text = _getText('selectPaymentScreenRoundTripSummary');
    if (nbRoundTrip != null) {
      text = text.replaceAll("%nbRoundTrip\$d", nbRoundTrip.toString());
    }
    return text;
  }

  String get selectPaymentScreenNonRefundable =>
      _getText('selectPaymentScreenNonRefundable');

  String get selectPaymentScreenRefundable =>
      _getText('selectPaymentScreenRefundable');

  String get selectPaymentScreenPay => _getText('selectPaymentScreenPay');

  String get selectPaymentScreenGooglePay =>
      _getText('selectPaymentScreenGooglePay');

  String get selectPaymentScreenApplePay =>
      _getText('selectPaymentScreenApplePay');

  String get creditCardTypeVisa => _getText('creditCardTypeVisa');

  String get creditCardTypeVisaElectron =>
      _getText('creditCardTypeVisaElectron');

  String get creditCardTypeMastercard => _getText('creditCardTypeMastercard');

  String get creditCardTypeAmericanExpress =>
      _getText('creditCardTypeAmericanExpress');

  String get newPaymentScreenCardType => _getText('newPaymentScreenCardType');

  String get newPaymentScreenCardNumber =>
      _getText('newPaymentScreenCardNumber');

  String get newPaymentScreenCardNumberHintText =>
      _getText('newPaymentScreenCardNumberHintText');

  String get newPaymentScreenCardHolderName =>
      _getText('newPaymentScreenCardHolderName');

  String get newPaymentScreenCardExpirationDate =>
      _getText('newPaymentScreenCardExpirationDate');

  String get newPaymentScreenCardExpirationDateHintText =>
      _getText('newPaymentScreenCardExpirationDateHintText');

  String get newPaymentScreenCardSecurityCode =>
      _getText('newPaymentScreenCardSecurityCode');

  String get newPaymentScreenCardSecurityCodeHintText =>
      _getText('newPaymentScreenCardSecurityCodeHintText');

  String get signUpLabel => _getText('signUpLabel');

  String get signUpContinueButton => _getText('signUpContinueButton');

  String get signUpPhoneDescription => _getText('signUpPhoneDescription');

  String get signUpPhoneNumberHintText => _getText('signUpPhoneNumberHintText');

  String get signUpAppleButton => _getText('signUpAppleButton');

  String get signUpGoogleButton => _getText('signUpGoogleButton');

  String get signUpConfirmLabel => _getText('signUpConfirmLabel');

  String get signUpConfirmButton => _getText('signUpConfirmButton');

  String get signUpConfirmEmptyPhoneNumberErrorText =>
      _getText('signUpConfirmEmptyPhoneNumberErrorText');

  String get signUpSmsCodeDescription => _getText('signUpSmsCodeDescription');

  String get signUpSmsCodeNotReceived => _getText('signUpSmsCodeNotReceived');

  String get signUpSmsCodeRetry => _getText('signUpSmsCodeRetry');

  String get signUpCountryListSearchLabel =>
      _getText('signUpCountryListSearchLabel');

  String get signUpCountryListSearchHintText =>
      _getText('signUpCountryListSearchHintText');

  String get signUpCountryListLastPickLabel =>
      _getText('signUpCountryListLastPickLabel');

  String get signUpSmsCodeEmptyErrorText =>
      _getText('signUpSmsCodeEmptyErrorText');

  String get overlayMessageAlertCreated =>
      _getText('overlayMessageAlertCreated');

  String get overlayMessageAlertCreatedTitle =>
      _getText('overlayMessageAlertCreatedTitle');

  String alertsListNotificationsItemNotificationFromDate({
    @required String startDate,
  }) {
    String text = _getText('alertsListNotificationsItemNotificationFromDate');
    if (startDate != null) {
      text = text.replaceAll("%startDate\$s", startDate);
    }
    return text;
  }

  String calendarDay(String key) {
    switch (key) {
      case '1':
        return _getText('calendarDay1');
      case '2':
        return _getText('calendarDay2');
      case '3':
        return _getText('calendarDay3');
      case '4':
        return _getText('calendarDay4');
      case '5':
        return _getText('calendarDay5');
      case '6':
        return _getText('calendarDay6');
      case '7':
        return _getText('calendarDay7');
    }
    throw Exception('No translation available for key calendarDay');
  }

  static Map<String, String> _localizedValues;

  static final Map<String, String> _frValues = <String, String>{
    'appBarClose': 'Fermer',
    'notificationsDisabledDialogTitle': 'Notifications désactivées',
    'notificationsDisabledDialogMessage':
        'Les notifications sont désactivées pour l\'application. Vous ne recevrez aucun bon plan.\n\nSi vous souhaitez tout de même les recevoir, veuillez réactiver les notifications depuis les paramètres. ',
    'notificationsDisabledDialogPositive': 'Ouvrir les paramètres',
    'notificationsDisabledDialogNegative': 'Ignorer',
    'genericDialogErrorTitle': 'Erreur !',
    'genericDialogPositiveLabel': 'Ok',
    'genericButtonFilterDeal': 'Deal',
    'genericButtonFilterAverage': 'Moyen',
    'genericButtonFilterExpensive': 'Cher',
    'genericPriceItem': '%value\$s €',
    'genericTimeItem': 'Vu il y a %duration\$s',
    'genericTimeDurationMinutes': 'min',
    'genericTimeDurationHours': 'h',
    'genericTimeDurationDays': 'j',
    'genericTimeDurationMinutesLong': 'min',
    'genericTimeDurationHoursLong': 'heures',
    'genericTimeDurationDaysLong': 'jours',
    'genericLoadingText': 'Chargement en cours',
    'genericListLoadingNextItems': 'Chargement des deals en cours…',
    'genericListEmpty': 'Aucun deal n\'est disponible !',
    'genericListError': 'Une erreur est survenue lors du chargement des deals.',
    'genericListRetry': 'Ré-essayer',
    'homePageScreenTitle': 'Au départ de',
    'homePageAppBarSearchHint': 'Destination, région ou type de voyage',
    'homePageAppBarDefaultLocation': 'Votre position',
    'homePageListReadMore': 'Tout voir',
    'homePageErrorMessage':
        'Une erreur est survenue lors du chargement des deals.',
    'homePageErrorButton': 'Ré-essayer',
    'homePageEmpty': 'Aucun deal n\'est disponible pour cette destination.',
    'subscribeToNotificationsButtonInitial':
        'Rester informé des nouveaux deals',
    'subscribeToNotificationsButtonLoading': 'Enregistrement en cours',
    'subscribeToNotificationsButtonSuccess': 'Abonné aux deals !',
    'subscribeToNotificationsButtonError':
        'Une erreur est survenue. Cliquez pour réessayer.',
    'appBarDetailsSubtitle': 'Plage de dates',
    'buttonCreateAlert': 'Créez une alerte',
    'titleBestDeal': 'Meilleure date disponible',
    'titleCalendar': 'Calendrier des deals',
    'buttonOpenDetails': 'Voir les détails',
    'buttonListFlights': 'Voir les vols',
    'titleOutwardFlight': 'Vol aller - %date\$s',
    'titleReturnFlight': 'Vol retour - %date\$s',
    'textCompanyName': 'Opéré par %company\$s',
    'textStopDuration': 'Escale de %duration\$s',
    'rangePickerScreenTitle': 'Choisissez vos dates',
    'rangePickerTitleDuration': 'Durée du voyage (jours)',
    'rangePickerButtonNoDuration': 'Indifférent',
    'rangePickerButtonUpToThreeDays': '0-3 jours',
    'rangePickerButtonUpToFiveDays': '3-5 jours',
    'rangePickerButtonUpToNineDays': '6-9 jours',
    'rangePickerButtonUpToFourteenDays': '10-14 jours',
    'rangePickerTitleCalendar': 'Calendrier des prix',
    'rangePickerTabButtonDeparture': 'Départ',
    'rangePickerTabButtonOutward': 'Retour',
    'rangePickerButtonSave': 'Sélectionner les dates',
    'filtersScreenTitle': 'Filtres',
    'filtersButtonCloseTooltip': 'Fermer',
    'filtersMenuDeleteFilters': 'Effacer',
    'filtersButtonEdit': 'Editer',
    'filtersButtonCreate': 'Valider',
    'filtersButtonApply': 'Appliquer',
    'filtersItemDates': 'Dates de voyage',
    'filtersItemStopOvers': 'Escales',
    'filtersItemFlightDuration': 'Durée de vol',
    'filtersItemFlightDurationSubtitle':
        '%startDuration\$d - %endDuration\$d H',
    'filtersItemFlightDurationMinValue': 'filtersItemFlightDurationMinValue',
    'filtersItemFlightDurationMaxValue': '24',
    'filtersItemBudget': 'Budget',
    'filtersItemBudgetSubtitle': '%startBudget\$d - %endBudget\$d €',
    'filtersItemBudgetMinValue': '0',
    'filtersItemBudgetMaxValue': '1000',
    'filtersStopsItemStopOversNone': 'Direct',
    'filtersStopsItemStopOversOne': '1 Escale',
    'filtersStopsItemStopOversMultiple': '2 Escales ou +',
    'alertsListScreenTitle': 'Alertes',
    'alertsListError':
        'Une erreur est survenue lors du chargement de vos notifications et alertes.',
    'alertsListTabNotifications': 'Notifications',
    'alertsListTabManage': 'Gérer mes alertes',
    'alertsListNotificationsEmpty': '0 notification',
    'alertsListNotificationsErrorMessage':
        'Une erreur est survenue lors du chargement de vos notifications.',
    'alertsListNotificationsErrorButton': 'Ré-essayer',
    'alertsListNotificationsItemCities': '%departureCity\$s - %arrivalCity\$s',
    'alertsListNotificationsItemJourney': '%departureDate\$s - %arrivalDate\$s',
    'alertsListNotificationsItemNotificationDate': 'Il y a %date\$s',
    'alertsListNotificationsItemNotificationDateRange':
        '%startDate\$s - %endDate\$s',
    'alertsListNotificationsItemNotificationDateRangeFlexible':
        'Du %startDate\$s au %endDate\$s',
    'alertsListNotificationsItemNotificationDateUnknown': '?',
    'alertsListNotificationsItemButtonDeleteTooltip':
        'Supprimer la notification',
    'alertsListManageEmpty': '0 alerte',
    'alertsListManageErrorMessage':
        'Une erreur est survenue lors du chargement de vos notifications.',
    'alertsListManageErrorButton': 'Ré-essayer',
    'alertsListManageItemButtonDeleteTooltip': 'Supprimer l\'alerte',
    'alertsListManageItemButtonEditTooltip': 'Modifier les filtres',
    'alertsListManageItemSingleNotification': '1 nouveau deal',
    'alertsListManageItemMultipleNotifications': '%count\$d nouveaux deals',
    'alertsListManageItemUpdateLoading': 'Mise à jour en cours',
    'alertsListManageItemUpdateErrorDialogTitle': 'Mise à jour de l\'alerte',
    'alertsListManageItemUpdateErrorDialogMessage':
        'La mise à jour de l\'alerte avec les nouveaux filtres a échoué.\n\nMerci de ré-essayer ultérieurement.',
    'alertsListManageItemDeleteLoading': 'Suppression en cours',
    'alertsListManageItemDeleteErrorDialogTitle': 'Suppression de l\'alerte',
    'alertsListManageItemDeleteErrorDialogMessage':
        'Une erreur est survenue lors de la suppression de votre alerte.\n\nMerci de ré-essayer ultérieurement.',
    'alertsListManageItemNoFilter': 'Aucun filtre',
    'travelDatesScreenTitle': 'Dates de voyage',
    'travelDatesTabFlexible': 'Dates flexibles',
    'travelDatesFlexibleRange': 'Plage de dates',
    'travelDatesFlexibleRangeSubtitle': '%startDate\$s - %endDate\$s',
    'travelDatesFlexibleTripDuration': 'Durée de séjour',
    'travelDatesFlexibleTripDurationWeekEnd': 'Week-end',
    'travelDatesFlexibleTripDurationSubtitle':
        '%minLength\$d - %maxLength\$d jours',
    'travelDatesFlexibleTripDurationSubtitleMax':
        '%minLength\$d - %maxLength\$d jours+',
    'travelDatesTabFixed': 'Dates fixes',
    'travelDatesTabFixedSubtitle': '%fromDate\$s au %toDate\$s',
    'travelDatesTabDeparture': 'Départ',
    'travelDatesTabOutward': 'Retour',
    'travelDatesButtonValidate': 'Valider',
    'travelDatesButtonFlexible': '+/- 3 j',
    'locationPickerLabelFrom': 'Au départ de',
    'locationPickerLabelTo': 'A destination de',
    'locationPickerItemCity':
        '%cityName\$s (%countryCode\$s) - Tous les aéroports',
    'locationPickerItemAirport': '%airportCode\$s - %airportName\$s',
    'locationPickerNoResult': 'Aucun résultat',
    'locationPickerErrorLabel':
        'Une erreur est survenue lors du chargement des suggestions.',
    'locationPickerErrorButton': 'Ré-essayer',
    'locationPickerSearchFieldHintFrom':
        'Sélectionner une ville ou un aéroport',
    'locationPickerSearchFieldHintTo':
        'Sélectionner une ville, un pays, continent…',
    'walkthroughStep1Line1': 'Trouve les meilleurs deals de vols',
    'walkthroughStep1Line2':
        'Mowgli identifie les meilleurs deals pour toi parmi 8 milliards d’offres chaque jour !',
    'walkthroughStep1PositiveButton': 'Continuer',
    'walkthroughStep2Line1': 'Ne manque plus aucun deal',
    'walkthroughStep2Line2':
        'Arrête de passer des heures à surveiller les meilleurs prix et laisse faire Mowgli',
    'walkthroughStep2PositiveButton': 'Alerte-moi',
    'walkthroughStep2NegativeButton': 'Peut-être plus\u00A0tard',
    'destinationViewerErrorMessage':
        'Une erreur est survenue lors du chargement des deals.',
    'destinationViewerErrorButton': 'Ré-essayer',
    'destinationViewerEmpty':
        'Aucun deal n\'est disponible pour cette destination.',
    'detailsScreenTitle': '%departure\$s - %arrival\$s',
    'detailsTipsTitle': 'Les conseils de Mowgli',
    'detailsTipsBadgeSuperDeal': 'Super deal',
    'detailsHopStopOversSingle': '1 escale, ',
    'detailsHopStopOversMultiple': '%count\$d escales, ',
    'detailsHopStopOversItem': '%destinationCode\$s, %duration\$s',
    'detailsHopStopOversItemSeparator': '\n',
    'detailsShareDeal':
        'Je viens de trouver un super deal pour %destination\$s à seulement %price\$s euros grâce à Mowgli. Profites-en maintenant !\nTélécharge l’application sur IOS : %iosLink\$s\nou sur Android : https://play.google.com/store/apps/details?id=%packageName\$s',
    'detailsButtonCalendar': 'Calendrier des deals',
    'priceCalendarScreenTitle': 'Calendrier des deals',
    'priceCalendarFlightDurationTitle': 'Durée du voyage',
    'priceCalendarFlightDurationValue': '%minLength\$d - %maxLength\$d jours',
    'priceCalendarFlightDurationValueMax':
        '%minLength\$d - %maxLength\$d jours+',
    'priceCalendarTabDeparture': 'Départ',
    'priceCalendarTabArrival': 'Retour',
    'priceCalendarButtonConfirm': 'Sélectionner les dates',
    'priceCalendarErrorMessage': 'Le chargement des prix a échoué.',
    'priceCalendarErrorButton': 'Ré-essayer',
    'dealDetailsNotificationsMessage':
        'Ne manque plus aucun deal\nsur %destination\$s',
    'dealDetailsNotificationsButtonEnable': 'Créez une alerte personnalisée',
    'dealDetailsNotificationsButtonLater': 'Peut-être plus tard',
    'dealDetailsMainOfferTitle': 'Meilleur deal',
    'dealDetailsOfferButtonCheckAvailability': 'Valider la disponiblité',
    'dealDetailsOfferButtonCheckAvailabilityDialogTitle':
        'C\'est pour bientôt !',
    'dealDetailsOfferButtonCheckAvailabilityDialogMessage':
        'La réservation n’est pas disponible pour le moment, mais nous travaillons dur pour la rendre disponible très prochainement.',
    'dealDetailsErrorLabel':
        'Une erreur est survenue lors du chargement des données du deal.',
    'dealDetailsErrorButton': 'Ré-essayer',
    'dealDetailsAppBarTitle': '%departureCity\$s - %arrivalCity\$s',
    'dealDetailsAppBarTitleEmpty': 'Détails du deal',
    'createAlertScreenTitle': 'Hey Mowgli 👋',
    'createAlertScreenSubtitle':
        'Alerte-moi des nouveaux deals  sur %departure\$s - %arrival\$s',
    'createAlertItemDates': 'Dates de voyages',
    'createAlertItemDatesEmptyValue': 'Toutes dates de voyage',
    'createAlertItemStopOvers': 'Escales',
    'createAlertItemStopOversEmptyValue': 'Indifférent',
    'createAlertItemFlightDuration': 'Durée de vol',
    'createAlertItemFlightDurationEmptyValue': 'Indifférent',
    'createAlertItemBudget': 'Budget',
    'createAlertItemBudgetEmptyValue': 'Indifférent',
    'createAlertButtonCreate': 'Créer une alerte',
    'calendarDay1': 'Lundi',
    'calendarDay2': 'Mardi',
    'calendarDay3': 'Mercredi',
    'calendarDay4': 'Jeudi',
    'calendarDay5': 'Vendredi',
    'calendarDay6': 'Samedi',
    'calendarDay7': 'Dimanche',
    'dealAvailableScreenMain': 'Trop cooooool ! \nLe prix est encore dispo',
    'dealAvailableScreenPricePerTraveler': 'Prix par voyageur',
    'dealAvailableScreenBook': 'Réservez',
    'dealAvailableScreenAlternatives': 'Les alternatives',
    'dealAvailableScreenAlternativesDirectOne': 'Prenez un vol direct pour',
    'dealAvailableScreenAlternativesDirectTwo': ' %price\$d€ de plus',
    'dealAvailableScreenAlternativesHoursOne':
        'D’autres horaires disponibles pour\n',
    'dealAvailableScreenAlternativesHoursTwo': '%price\$d€ de plus',
    'dealNotAvailableScreenMain': 'Trop tard\nLe prix a évolué !',
    'dealNotAvailableScreenDealInfosOne':
        'Ce tarif observé il y a %duration\$d %durationType\$s n’est plus disponible.\nLes compagnies aériennes font varier leur tarifs en permanence',
    'dealNotAvailableScreenDealInfosTwo':
        'Mowgli va t’aider à être certain d’obtenir \nle meilleur deal en te notifiant ',
    'dealNotAvailableScreenEnableNotifications': 'Activer les notifications',
    'dealNotAvailableScreenBestOffer': 'Meilleure offre disponible',
    'directAlternativesScreenMain': 'Les vols directs à partir de %price\$d€',
    'hoursAlternativesScreenMain': 'Les horaires à partir de %price\$d€',
    'tripDetailsScreenOutbound': 'Vol aller vers %city\$s',
    'tripDetailsScreenInbound': 'Vol retour vers %city\$s',
    'tripDetailsScreenStopOver': 'Ecale de %hours\$dh%minutes\$dmin',
    'tripDetailsScreenContinue': 'Continuer',
    'tripDetailsScreenOperatedBy': 'Opéré par %company\$s',
    'travelersCounterScreenTitle': 'Choix des voyageurs',
    'travelersCounterScreenInfantAge': ' (2-12 ans)',
    'travelersCounterScreenBabyAge': ' (0-2 ans)',
    'travelersCounterScreenConfirm': 'Confirmer',
    'addOptionsScreenTitle': 'Ajouter des options',
    'addOptionsScreenAddLuggage': 'Ajouter des bagages',
    'addOptionsScreenLuggagePerTraveler': 'Bagage(s) voyageur %travelerNb\$d',
    'addOptionsScreenLuggagePerTravelerSub':
        '23kg en soute pour %bagagePrice\$d€',
    'addOptionsScreenTotal': 'Total :',
    'addOptionsScreenSummary':
        '%nbTravelers\$d voyageur - %totalLuggages\$d bagages',
    'addOptionsScreenContinue': 'Continuer',
    'priceDetailsScreenTitle': 'Les conditions du tarif',
    'priceDetailsScreenCabinSummary': 'Vol en classe %cabinClass\$s',
    'priceDetailsScreenChoiceSummaryOne': 'Bon choix !',
    'priceDetailsScreenChoiceSummaryTwo': 'ci-dessous les détails',
    'priceDetailsScreenChoiceSummaryThree': 'concernant ta sélection',
    'priceDetailsScreenSeat': 'Selection du siège',
    'priceDetailsScreenSeatChoice': 'Choisir',
    'priceDetailsScreenCabinLuggageSummary': 'Bagage cabine',
    'priceDetailsScreenLuggageSummary': 'Bagage(s) en soute',
    'priceDetailsScreenLuggageSummaryPrice':
        'Bagage n°%luggageNb\$d : %luggagePrice\$d€',
    'priceDetailsScreenModification': 'Modifications',
    'priceDetailsScreenModificationPrice':
        '%modificationPriceInt\$d,%modificationPriceDecimal\$d€',
    'priceDetailsScreenCancelation': 'Annulations',
    'priceDetailsScreenCancelationConditions': 'Sous conditions',
    'priceDetailsScreenTip': 'Inclure un pourboire de 3€',
    'priceDetailsScreenTipDescription':
        'Aide Mowgli avec cette gratification facultative, à trouver les meilleurs deals pour toi',
    'priceDetailsScreenTotal': 'Total :',
    'priceDetailsScreenContinue': 'Continuer',
    'chooseTravelersScreenTitle': 'Informations voyageurs',
    'chooseTravelersScreenTravelerNumber': 'Voyageur %travelerNb\$d -',
    'chooseTravelersScreenTravelerType': '%travelerType\$s',
    'tripCardShowDetails': 'Afficher les détails',
    'luggagesNumberCount': 'x%luggagesNumber\$d',
    'travelerTypeAdult': 'Adulte',
    'travelerTypeInfant': 'Enfant',
    'travelerTypeBaby': 'Bébé',
    'newTravelerScreenWarningOne':
        'Les corrections de noms ne sont pas autorisées après la réservation.',
    'newTravelerScreenWarningTwo':
        'Vérifie bien que toutes les informations correspondent à celles des documents de voyage !',
    'newTravelerScreenRequiredInfosTitle': 'Informations requises',
    'newTravelerScreenLastName': 'Nom',
    'newTravelerScreenFirstName': 'Prénom',
    'newTravelerScreenSecondName': 'Deuxième prénom',
    'newTravelerScreenBirthdate': 'Date de naissance',
    'newTravelerScreenFirstGender': 'Sexe',
    'newTravelerScreenNationality': 'Nationalité',
    'newTravelerScreenPassportNumber': 'Numéro de passeport',
    'newTravelerScreenExpirationDate': 'Date d\'expiration',
    'newTravelerScreenAdditionalInfosTitle': 'Informations complémentaires',
    'newTravelerScreenNeedAssistance': 'Besoin d\'une assistance',
    'newTravelerScreenPhoneNumber': 'Numéro de téléphone',
    'newTravelerScreenEmail': 'Email',
    'newTravelerScreenEmailConfirmation': 'Confirmation email',
    'newTravelerScreenValidate': 'Valider',
    'newTravelerScreenErrorName': 'Ecrivez votre nom sans accent et sans tiret',
    'newTravelerScreenErrorPassportNumber':
        'Ecrivez le numéro tel qu’il apparait sur votre passeport',
    'newTravelerScreenErrorWrongEmail':
        'L’adresse e-mail renseignée n’est pas correcte',
    'newTravelerScreenErrorDifferentEmails':
        'les adresses e-mails renseignées ne correspondent pas',
    'travelersSummaryScreenSelectPayment': 'Selectionner un moyen de paiement',
    'travelersSummaryScreenAdult': 'Adulte(s)',
    'travelersSummaryScreenInfant': 'Enfants(s)',
    'travelersSummaryScreenBaby': 'Bébé(s)',
    'selectPaymentScreenAddCard': 'Ajouter une carte',
    'selectPaymentScreenNameType': '%travelerName\$s : 1 %travelerType\$s',
    'selectPaymentScreenCardTypeNumber': '%cardType\$s N° %hiddenCardNumber\$s',
    'selectPaymentScreenBasePrice': 'Tarif de base',
    'selectPaymentScreenTaxes': 'Taxes et frais',
    'selectPaymentScreenTotal': 'Total :',
    'selectPaymentScreenOneWaySummary': '%nbOneWay\$dx aller',
    'selectPaymentScreenRoundTripSummary': '%nbRoundTrip\$dx aller-retour',
    'selectPaymentScreenNonRefundable': 'non-remboursable',
    'selectPaymentScreenRefundable': 'remboursable',
    'selectPaymentScreenPay': 'Payer',
    'selectPaymentScreenGooglePay': 'Google Pay',
    'selectPaymentScreenApplePay': 'Apple Pay',
    'creditCardTypeVisa': 'Visa',
    'creditCardTypeVisaElectron': 'Visa Electron',
    'creditCardTypeMastercard': 'Mastercard',
    'creditCardTypeAmericanExpress': 'American Express',
    'newPaymentScreenCardType': 'Type de carte',
    'newPaymentScreenCardNumber': 'Numéro de la carte bancaire',
    'newPaymentScreenCardNumberHintText': 'XXXX XXXX XXXX XXXX',
    'newPaymentScreenCardHolderName': 'Titulaire de la carte',
    'newPaymentScreenCardExpirationDate': 'Date d’expiration',
    'newPaymentScreenCardExpirationDateHintText': 'XX/XX',
    'newPaymentScreenCardSecurityCode': 'Code de sécurité',
    'newPaymentScreenCardSecurityCodeHintText': 'XXX',
    'signUpLabel': 'Inscription',
    'signUpContinueButton': 'Continuer l’inscription',
    'signUpPhoneDescription': 'Ou s\'inscrire avec votre numéro de téléphone',
    'signUpPhoneNumberHintText': 'Saisir votre numéro de téléphone',
    'signUpAppleButton': 'S’inscrire avec Apple',
    'signUpGoogleButton': 'S’inscrire avec Google',
    'signUpConfirmLabel': 'Valider mon inscription',
    'signUpConfirmButton': 'Valider l\'inscription',
    'signUpConfirmEmptyPhoneNumberErrorText':
        'Le numero de téléphone doit être renseigné.',
    'signUpSmsCodeDescription': 'Entrer le code reçu par SMS',
    'signUpSmsCodeNotReceived': 'Code non reçu?',
    'signUpSmsCodeRetry': 'Renvoyer le code',
    'signUpCountryListSearchLabel': 'Rechercher',
    'signUpCountryListSearchHintText': 'Rechercher...',
    'signUpCountryListLastPickLabel': 'Pays sélectionné',
    'signUpSmsCodeEmptyErrorText': 'Le code sms reçu est manquant.',
    'overlayMessageAlertCreated':
        'Vous recevrez une alerte à chaque changement de prix',
    'overlayMessageAlertCreatedTitle': 'Alerte crée!',
    'alertsListNotificationsItemNotificationFromDate':
        'À partir du %startDate\$s',
  };

  static final Map<String, Map<String, String>> _allValues =
      <String, Map<String, String>>{
    'fr': _frValues,
  };

  Translations(Locale locale) {
    this._locale = locale;
    _localizedValues = null;
  }

  Locale _locale;

  static Translations of(BuildContext context) {
    return Localizations.of<Translations>(context, Translations);
  }

  String _getText(String key) {
    return _localizedValues[key] ?? '** $key not found';
  }

  Locale get currentLocale => _locale;

  String get currentLanguage => _locale.languageCode;

  static Future<Translations> load(Locale locale) async {
    final Translations translations = Translations(locale);
    _localizedValues = _allValues[locale.toString()];
    return translations;
  }
}

class TranslationsDelegate extends LocalizationsDelegate<Translations> {
  const TranslationsDelegate();

  static final Set<Locale> supportedLocals = <Locale>{
    Locale('fr'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<Translations> load(Locale locale) => Translations.load(locale);

  @override
  bool shouldReload(TranslationsDelegate old) => false;
}
